// Mocks generated by Mockito 5.4.4 from annotations
// in sj_manager/test/repositories/databases/local_storage_multilingual_countries_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sj_manager/models/country.dart' as _i3;
import 'package:sj_manager/repositories/countries/local_storage_multilingual_countries_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFile_0 extends _i1.SmartFake implements _i2.File {
  _FakeFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCountry_1 extends _i1.SmartFake implements _i3.Country {
  _FakeCountry_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorageMultilingualCountriesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageMultilingualCountriesRepository extends _i1.Mock
    implements _i4.LocalStorageMultilingualCountriesRepository {
  MockLocalStorageMultilingualCountriesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.File get storageFile => (super.noSuchMethod(
        Invocation.getter(#storageFile),
        returnValue: _FakeFile_0(
          this,
          Invocation.getter(#storageFile),
        ),
      ) as _i2.File);

  @override
  String get languageCode => (super.noSuchMethod(
        Invocation.getter(#languageCode),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#languageCode),
        ),
      ) as String);

  @override
  Iterable<_i3.Country> get countries => (super.noSuchMethod(
        Invocation.getter(#countries),
        returnValue: <_i3.Country>[],
      ) as Iterable<_i3.Country>);

  @override
  _i3.Country get none => (super.noSuchMethod(
        Invocation.getter(#none),
        returnValue: _FakeCountry_1(
          this,
          Invocation.getter(#none),
        ),
      ) as _i3.Country);

  @override
  _i6.Future<void> loadFromSource() => (super.noSuchMethod(
        Invocation.method(
          #loadFromSource,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> saveToSource() => (super.noSuchMethod(
        Invocation.method(
          #saveToSource,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i3.Country? byCode(String? code) => (super.noSuchMethod(Invocation.method(
        #byCode,
        [code],
      )) as _i3.Country?);
}
