// Mocks generated by Mockito 5.4.4 from annotations
// in sj_manager/test/local_database/bloc/database_editing_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:rxdart/rxdart.dart' as _i2;
import 'package:sj_manager/models/db/country/country.dart' as _i4;
import 'package:sj_manager/models/db/country/country_facts.dart' as _i8;
import 'package:sj_manager/repositories/countries/countries_repo.dart' as _i6;
import 'package:sj_manager/repositories/countries/country_facts/country_facts_repo.dart'
    as _i7;
import 'package:sj_manager/repositories/generic/editable_db_items_repo.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueStream_0<T1> extends _i1.SmartFake
    implements _i2.ValueStream<T1> {
  _FakeValueStream_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEditableDbItemsRepo_1<T1> extends _i1.SmartFake
    implements _i3.EditableDbItemsRepo<T1> {
  _FakeEditableDbItemsRepo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCountry_2 extends _i1.SmartFake implements _i4.Country {
  _FakeCountry_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EditableDbItemsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditableDbItemsRepo<T> extends _i1.Mock
    implements _i3.EditableDbItemsRepo<T> {
  MockEditableDbItemsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<T> get lastItems => (super.noSuchMethod(
        Invocation.getter(#lastItems),
        returnValue: <T>[],
      ) as List<T>);

  @override
  _i2.ValueStream<List<T>> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeValueStream_0<List<T>>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.ValueStream<List<T>>);

  @override
  int get lastLength => (super.noSuchMethod(
        Invocation.getter(#lastLength),
        returnValue: 0,
      ) as int);

  @override
  _i3.EditableDbItemsRepo<T> clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeEditableDbItemsRepo_1<T>(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i3.EditableDbItemsRepo<T>);

  @override
  void add(
    T? item, [
    int? index,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            item,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(T? item) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [item],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T removeAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeAt,
          [index],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #removeAt,
            [index],
          ),
        ),
      ) as T);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(Iterable<T>? value) => super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void move({
    required int? from,
    required int? to,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #move,
          [],
          {
            #from: from,
            #to: to,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replace({
    required int? oldIndex,
    required T? newItem,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replace,
          [],
          {
            #oldIndex: oldIndex,
            #newItem: newItem,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CountriesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountriesRepo extends _i1.Mock implements _i6.CountriesRepo {
  MockCountriesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueStream<List<_i4.Country>> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeValueStream_0<List<_i4.Country>>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.ValueStream<List<_i4.Country>>);

  @override
  _i4.Country get none => (super.noSuchMethod(
        Invocation.getter(#none),
        returnValue: _FakeCountry_2(
          this,
          Invocation.getter(#none),
        ),
      ) as _i4.Country);

  @override
  List<_i4.Country> get lastItems => (super.noSuchMethod(
        Invocation.getter(#lastItems),
        returnValue: <_i4.Country>[],
      ) as List<_i4.Country>);

  @override
  int get lastLength => (super.noSuchMethod(
        Invocation.getter(#lastLength),
        returnValue: 0,
      ) as int);

  @override
  void setCountries(List<_i4.Country>? countries) => super.noSuchMethod(
        Invocation.method(
          #setCountries,
          [countries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Country byCode(String? code) => (super.noSuchMethod(
        Invocation.method(
          #byCode,
          [code],
        ),
        returnValue: _FakeCountry_2(
          this,
          Invocation.method(
            #byCode,
            [code],
          ),
        ),
      ) as _i4.Country);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(List<_i4.Country>? value) => super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MaleCountryFactsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaleCountryFactsRepo extends _i1.Mock
    implements _i7.MaleCountryFactsRepo {
  MockMaleCountryFactsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueStream<List<_i8.MaleCountryFacts>> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeValueStream_0<List<_i8.MaleCountryFacts>>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.ValueStream<List<_i8.MaleCountryFacts>>);

  @override
  List<_i8.MaleCountryFacts> get lastItems => (super.noSuchMethod(
        Invocation.getter(#lastItems),
        returnValue: <_i8.MaleCountryFacts>[],
      ) as List<_i8.MaleCountryFacts>);

  @override
  int get lastLength => (super.noSuchMethod(
        Invocation.getter(#lastLength),
        returnValue: 0,
      ) as int);

  @override
  void set(List<_i8.MaleCountryFacts>? value) => super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FemaleCountryFactsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFemaleCountryFactsRepo extends _i1.Mock
    implements _i7.FemaleCountryFactsRepo {
  MockFemaleCountryFactsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueStream<List<_i8.FemaleCountryFacts>> get items =>
      (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeValueStream_0<List<_i8.FemaleCountryFacts>>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.ValueStream<List<_i8.FemaleCountryFacts>>);

  @override
  List<_i8.FemaleCountryFacts> get lastItems => (super.noSuchMethod(
        Invocation.getter(#lastItems),
        returnValue: <_i8.FemaleCountryFacts>[],
      ) as List<_i8.FemaleCountryFacts>);

  @override
  int get lastLength => (super.noSuchMethod(
        Invocation.getter(#lastLength),
        returnValue: 0,
      ) as int);

  @override
  void set(List<_i8.FemaleCountryFacts>? value) => super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
