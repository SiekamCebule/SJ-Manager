// Mocks generated by Mockito 5.4.4 from annotations
// in sj_manager/test/local_database/bloc/database_editing_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:rxdart/rxdart.dart' as _i2;
import 'package:sj_manager/repositories/database_editing/db_items_local_storage_repository.dart'
    as _i7;
import 'package:sj_manager/repositories/database_editing/db_items_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueStream_0<T1> extends _i1.SmartFake
    implements _i2.ValueStream<T1> {
  _FakeValueStream_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDbItemsRepository_1<T1> extends _i1.SmartFake
    implements _i3.DbItemsRepository<T1> {
  _FakeDbItemsRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_3 extends _i1.SmartFake implements _i5.File {
  _FakeFile_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DbItemsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbItemsRepository<T> extends _i1.Mock
    implements _i3.DbItemsRepository<T> {
  MockDbItemsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueStream<Iterable<T>> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeValueStream_0<Iterable<T>>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.ValueStream<Iterable<T>>);

  @override
  _i4.Future<_i3.DbItemsRepository<T>> clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _i4.Future<_i3.DbItemsRepository<T>>.value(
            _FakeDbItemsRepository_1<T>(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        )),
      ) as _i4.Future<_i3.DbItemsRepository<T>>);

  @override
  _i4.Future<void> add(
    T? item, [
    int? index,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [
            item,
            index,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> remove(T? item) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [item],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T> removeAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeAt,
          [index],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #removeAt,
                  [index],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #removeAt,
                [index],
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadRaw(Iterable<T>? items) => (super.noSuchMethod(
        Invocation.method(
          #loadRaw,
          [items],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> move({
    required int? from,
    required int? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #move,
          [],
          {
            #from: from,
            #to: to,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> replace({
    required int? oldIndex,
    required T? newItem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replace,
          [],
          {
            #oldIndex: oldIndex,
            #newItem: newItem,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadFromSource() => (super.noSuchMethod(
        Invocation.method(
          #loadFromSource,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveToSource() => (super.noSuchMethod(
        Invocation.method(
          #saveToSource,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DbItemsLocalStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbItemsLocalStorageRepository<T> extends _i1.Mock
    implements _i7.DbItemsLocalStorageRepository<T> {
  MockDbItemsLocalStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T Function(Map<String, dynamic>) get fromJson => (super.noSuchMethod(
        Invocation.getter(#fromJson),
        returnValue: (Map<String, dynamic> json) => _i6.dummyValue<T>(
          this,
          Invocation.getter(#fromJson),
        ),
      ) as T Function(Map<String, dynamic>));

  @override
  set fromJson(T Function(Map<String, dynamic>)? _fromJson) =>
      super.noSuchMethod(
        Invocation.setter(
          #fromJson,
          _fromJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> Function(T) get toJson => (super.noSuchMethod(
        Invocation.getter(#toJson),
        returnValue: (T object) => <String, dynamic>{},
      ) as Map<String, dynamic> Function(T));

  @override
  set toJson(Map<String, dynamic> Function(T)? _toJson) => super.noSuchMethod(
        Invocation.setter(
          #toJson,
          _toJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.File get storageFile => (super.noSuchMethod(
        Invocation.getter(#storageFile),
        returnValue: _FakeFile_3(
          this,
          Invocation.getter(#storageFile),
        ),
      ) as _i5.File);

  @override
  _i2.ValueStream<Iterable<T>> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeValueStream_0<Iterable<T>>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.ValueStream<Iterable<T>>);

  @override
  _i4.Future<_i3.DbItemsRepository<T>> clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _i4.Future<_i3.DbItemsRepository<T>>.value(
            _FakeDbItemsRepository_1<T>(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        )),
      ) as _i4.Future<_i3.DbItemsRepository<T>>);

  @override
  _i4.Future<void> add(
    T? item, [
    int? index,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [
            item,
            index,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> remove(T? item) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [item],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T> removeAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeAt,
          [index],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #removeAt,
                  [index],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #removeAt,
                [index],
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadRaw(Iterable<T>? items) => (super.noSuchMethod(
        Invocation.method(
          #loadRaw,
          [items],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> move({
    required int? from,
    required int? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #move,
          [],
          {
            #from: from,
            #to: to,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> replace({
    required int? oldIndex,
    required T? newItem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replace,
          [],
          {
            #oldIndex: oldIndex,
            #newItem: newItem,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadFromSource() => (super.noSuchMethod(
        Invocation.method(
          #loadFromSource,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveToSource() => (super.noSuchMethod(
        Invocation.method(
          #saveToSource,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
