// Mocks generated by Mockito 5.4.4 from annotations
// in sj_manager/test/competitions/wind_averaging_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:osje_sim/osje_sim.dart' as _i5;
import 'package:sj_manager/models/simulation_db/competition/competition.dart'
    as _i3;
import 'package:sj_manager/models/simulation_db/competition/rules/utils/wind_averager/wind_averager.dart'
    as _i6;
import 'package:sj_manager/models/simulation_db/event_series/event_series.dart'
    as _i2;
import 'package:sj_manager/models/user_db/hill/hill.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEventSeries_0 extends _i1.SmartFake implements _i2.EventSeries {
  _FakeEventSeries_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompetition_1<E> extends _i1.SmartFake
    implements _i3.Competition<E> {
  _FakeCompetition_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHill_2 extends _i1.SmartFake implements _i4.Hill {
  _FakeHill_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindMeasurement_3 extends _i1.SmartFake
    implements _i5.WindMeasurement {
  _FakeWindMeasurement_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WindAveragingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockWindAveragingContext extends _i1.Mock
    implements _i6.WindAveragingContext {
  MockWindAveragingContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_0(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i2.EventSeries);

  @override
  _i3.Competition<dynamic> get competition => (super.noSuchMethod(
        Invocation.getter(#competition),
        returnValue: _FakeCompetition_1<dynamic>(
          this,
          Invocation.getter(#competition),
        ),
      ) as _i3.Competition<dynamic>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i4.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_2(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i4.Hill);

  @override
  int get initialGate => (super.noSuchMethod(
        Invocation.getter(#initialGate),
        returnValue: 0,
      ) as int);

  @override
  int get gate => (super.noSuchMethod(
        Invocation.getter(#gate),
        returnValue: 0,
      ) as int);

  @override
  _i5.WindMeasurement get windMeasurement => (super.noSuchMethod(
        Invocation.getter(#windMeasurement),
        returnValue: _FakeWindMeasurement_3(
          this,
          Invocation.getter(#windMeasurement),
        ),
      ) as _i5.WindMeasurement);

  @override
  List<double> get windMeasurementWeights => (super.noSuchMethod(
        Invocation.getter(#windMeasurementWeights),
        returnValue: <double>[],
      ) as List<double>);

  @override
  double get distance => (super.noSuchMethod(
        Invocation.getter(#distance),
        returnValue: 0.0,
      ) as double);
}
