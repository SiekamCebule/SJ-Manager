// Mocks generated by Mockito 5.4.4 from annotations
// in sj_manager/test/competitions/competition_rules_utilities_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/material.dart' as _i16;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:sj_manager/core/core_classes/country/country.dart' as _i12;
import 'package:sj_manager/core/core_classes/hill/hill.dart' as _i7;
import 'package:sj_manager/core/general_utils/multilingual_string.dart' as _i11;
import 'package:sj_manager/features/database_editor/domain/entities/jumper/jumper_db_record.dart'
    as _i8;
import 'package:sj_manager/features/simulations/domain/entities/simulation/database/calendar/event_series/event_series.dart'
    as _i4;
import 'package:sj_manager/features/simulations/domain/entities/simulation/database/calendar/standings/score/details/jump_score_details.dart'
    as _i14;
import 'package:sj_manager/features/simulations/domain/entities/simulation/database/calendar/standings/score/details/score_details.dart'
    as _i1;
import 'package:sj_manager/features/simulations/domain/entities/simulation/database/calendar/standings/score/score.dart'
    as _i3;
import 'package:sj_manager/features/simulations/domain/entities/simulation/database/calendar/standings/standings.dart'
    as _i5;
import 'package:sj_manager/features/simulations/domain/entities/simulation/database/team/simulation_team/simulation_team.dart'
    as _i9;
import 'package:sj_manager/features/competitions/domain/entities/scoring/score/subjects/competition_team.dart'
    as _i10;
import 'package:sj_manager/to_embrace/competition/competition.dart' as _i6;
import 'package:sj_manager/features/competitions/domain/utils/competition_score_creator/competition_score_creator.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScore_0<E, D extends _i1.ScoreDetails> extends _i2.SmartFake
    implements _i3.Score<E, D> {
  _FakeScore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventSeries_1 extends _i2.SmartFake implements _i4.EventSeries {
  _FakeEventSeries_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompetition_2<E, S extends _i5.Standings<dynamic, _i1.ScoreDetails>>
    extends _i2.SmartFake implements _i6.Competition<E, S> {
  _FakeCompetition_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHill_3 extends _i2.SmartFake implements _i7.Hill {
  _FakeHill_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJumperDbRecord_4 extends _i2.SmartFake implements _i8.JumperDbRecord {
  _FakeJumperDbRecord_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompetitionTeam_5<T extends _i9.SimulationTeam> extends _i2.SmartFake
    implements _i10.CompetitionTeam<T> {
  _FakeCompetitionTeam_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultilingualString_6 extends _i2.SmartFake implements _i11.MultilingualString {
  _FakeMultilingualString_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCountry_7 extends _i2.SmartFake implements _i12.Country {
  _FakeCountry_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IndividualCompetitionScoreCreatingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockIndividualCompetitionScoreCreatingContext extends _i2.Mock
    implements _i13.IndividualCompetitionScoreCreatingContext {
  MockIndividualCompetitionScoreCreatingContext() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.Score<_i8.JumperDbRecord, _i14.JumpScoreDetails> get lastJumpScore =>
      (super.noSuchMethod(
        Invocation.getter(#lastJumpScore),
        returnValue: _FakeScore_0<_i8.JumperDbRecord, _i14.JumpScoreDetails>(
          this,
          Invocation.getter(#lastJumpScore),
        ),
      ) as _i3.Score<_i8.JumperDbRecord, _i14.JumpScoreDetails>);

  @override
  _i4.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_1(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i4.EventSeries);

  @override
  _i6.Competition<_i8.JumperDbRecord, _i5.Standings<dynamic, _i1.ScoreDetails>>
      get competition => (super.noSuchMethod(
            Invocation.getter(#competition),
            returnValue: _FakeCompetition_2<_i8.JumperDbRecord,
                _i5.Standings<dynamic, _i1.ScoreDetails>>(
              this,
              Invocation.getter(#competition),
            ),
          ) as _i6
              .Competition<_i8.JumperDbRecord, _i5.Standings<dynamic, _i1.ScoreDetails>>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i7.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_3(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i7.Hill);

  @override
  _i8.JumperDbRecord get entity => (super.noSuchMethod(
        Invocation.getter(#entity),
        returnValue: _FakeJumperDbRecord_4(
          this,
          Invocation.getter(#entity),
        ),
      ) as _i8.JumperDbRecord);
}

/// A class which mocks [TeamCompetitionScoreCreatingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamCompetitionScoreCreatingContext extends _i2.Mock
    implements _i13.TeamCompetitionScoreCreatingContext {
  MockTeamCompetitionScoreCreatingContext() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.Score<_i8.JumperDbRecord, _i14.JumpScoreDetails> get lastJumpScore =>
      (super.noSuchMethod(
        Invocation.getter(#lastJumpScore),
        returnValue: _FakeScore_0<_i8.JumperDbRecord, _i14.JumpScoreDetails>(
          this,
          Invocation.getter(#lastJumpScore),
        ),
      ) as _i3.Score<_i8.JumperDbRecord, _i14.JumpScoreDetails>);

  @override
  _i4.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_1(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i4.EventSeries);

  @override
  _i6
      .Competition<_i10.CompetitionTeam<_i9.SimulationTeam>,
          _i5.Standings<dynamic, _i1.ScoreDetails>>
      get competition => (super.noSuchMethod(
            Invocation.getter(#competition),
            returnValue: _FakeCompetition_2<_i10.CompetitionTeam<_i9.SimulationTeam>,
                _i5.Standings<dynamic, _i1.ScoreDetails>>(
              this,
              Invocation.getter(#competition),
            ),
          ) as _i6.Competition<_i10.CompetitionTeam<_i9.SimulationTeam>,
              _i5.Standings<dynamic, _i1.ScoreDetails>>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i7.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_3(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i7.Hill);

  @override
  _i10.CompetitionTeam<_i9.SimulationTeam> get entity => (super.noSuchMethod(
        Invocation.getter(#entity),
        returnValue: _FakeCompetitionTeam_5<_i9.SimulationTeam>(
          this,
          Invocation.getter(#entity),
        ),
      ) as _i10.CompetitionTeam<_i9.SimulationTeam>);
}

/// A class which mocks [Country].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountry extends _i2.Mock implements _i12.Country {
  MockCountry() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get code => (super.noSuchMethod(
        Invocation.getter(#code),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#code),
        ),
      ) as String);

  @override
  _i11.MultilingualString get multilingualName => (super.noSuchMethod(
        Invocation.getter(#multilingualName),
        returnValue: _FakeMultilingualString_6(
          this,
          Invocation.getter(#multilingualName),
        ),
      ) as _i11.MultilingualString);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  String name(_i16.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #name,
          [context],
        ),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.method(
            #name,
            [context],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i12.Country copyWith({
    String? code,
    _i11.MultilingualString? multilingualName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #code: code,
            #multilingualName: multilingualName,
          },
        ),
        returnValue: _FakeCountry_7(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #code: code,
              #multilingualName: multilingualName,
            },
          ),
        ),
      ) as _i12.Country);
}
