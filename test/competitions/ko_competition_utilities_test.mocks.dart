// Mocks generated by Mockito 5.4.4 from annotations
// in sj_manager/test/competitions/ko_competition_utilities_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:sj_manager/data/models/simulation/competition/competition.dart' as _i5;
import 'package:sj_manager/data/models/simulation/competition/rules/utils/ko_group_creator.dart/concrete/default.dart'
    as _i8;
import 'package:sj_manager/data/models/simulation/competition/rules/utils/ko_group_creator.dart/ko_groups_creator.dart'
    as _i7;
import 'package:sj_manager/data/models/simulation/competition/rules/utils/ko_round_advancement_determinator/concrete/n_best.dart'
    as _i9;
import 'package:sj_manager/data/models/simulation/event_series/event_series.dart' as _i2;
import 'package:sj_manager/data/models/simulation/standings/score/details/score_details.dart'
    as _i4;
import 'package:sj_manager/data/models/simulation/standings/standings.dart' as _i3;
import 'package:sj_manager/data/models/database/hill/hill.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEventSeries_0 extends _i1.SmartFake implements _i2.EventSeries {
  _FakeEventSeries_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompetition_1<E, S extends _i3.Standings<dynamic, _i4.ScoreDetails>>
    extends _i1.SmartFake implements _i5.Competition<E, S> {
  _FakeCompetition_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHill_2 extends _i1.SmartFake implements _i6.Hill {
  _FakeHill_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [KoGroupsCreatingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockKoGroupsCreatingContext<T> extends _i1.Mock
    implements _i7.KoGroupsCreatingContext<T> {
  MockKoGroupsCreatingContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_0(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i2.EventSeries);

  @override
  _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>> get competition =>
      (super.noSuchMethod(
        Invocation.getter(#competition),
        returnValue: _FakeCompetition_1<T, _i3.Standings<dynamic, _i4.ScoreDetails>>(
          this,
          Invocation.getter(#competition),
        ),
      ) as _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i6.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_2(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i6.Hill);

  @override
  int get entitiesCount => (super.noSuchMethod(
        Invocation.getter(#entitiesCount),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [ClassicKoGroupsCreatingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassicKoGroupsCreatingContext<T> extends _i1.Mock
    implements _i7.ClassicKoGroupsCreatingContext<T> {
  MockClassicKoGroupsCreatingContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<T> get entities => (super.noSuchMethod(
        Invocation.getter(#entities),
        returnValue: <T>[],
      ) as List<T>);

  @override
  int get entitiesCount => (super.noSuchMethod(
        Invocation.getter(#entitiesCount),
        returnValue: 0,
      ) as int);

  @override
  _i2.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_0(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i2.EventSeries);

  @override
  _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>> get competition =>
      (super.noSuchMethod(
        Invocation.getter(#competition),
        returnValue: _FakeCompetition_1<T, _i3.Standings<dynamic, _i4.ScoreDetails>>(
          this,
          Invocation.getter(#competition),
        ),
      ) as _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i6.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_2(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i6.Hill);
}

/// A class which mocks [RandomKoGroupsCreatingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomKoGroupsCreatingContext<T> extends _i1.Mock
    implements _i7.RandomKoGroupsCreatingContext<T> {
  MockRandomKoGroupsCreatingContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<T> get entities => (super.noSuchMethod(
        Invocation.getter(#entities),
        returnValue: <T>[],
      ) as List<T>);

  @override
  int get entitiesCount => (super.noSuchMethod(
        Invocation.getter(#entitiesCount),
        returnValue: 0,
      ) as int);

  @override
  int get entitiesInGroup => (super.noSuchMethod(
        Invocation.getter(#entitiesInGroup),
        returnValue: 0,
      ) as int);

  @override
  _i8.KoGroupsCreatorRemainingEntitiesAction get remainingEntitiesAction =>
      (super.noSuchMethod(
        Invocation.getter(#remainingEntitiesAction),
        returnValue: _i8.KoGroupsCreatorRemainingEntitiesAction.placeRandomly,
      ) as _i8.KoGroupsCreatorRemainingEntitiesAction);

  @override
  _i2.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_0(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i2.EventSeries);

  @override
  _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>> get competition =>
      (super.noSuchMethod(
        Invocation.getter(#competition),
        returnValue: _FakeCompetition_1<T, _i3.Standings<dynamic, _i4.ScoreDetails>>(
          this,
          Invocation.getter(#competition),
        ),
      ) as _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i6.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_2(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i6.Hill);
}

/// A class which mocks [KoGroupsPotsCreatingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockKoGroupsPotsCreatingContext<T> extends _i1.Mock
    implements _i7.KoGroupsPotsCreatingContext<T> {
  MockKoGroupsPotsCreatingContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<List<T>> get pots => (super.noSuchMethod(
        Invocation.getter(#pots),
        returnValue: <List<T>>[],
      ) as List<List<T>>);

  @override
  int get entitiesCount => (super.noSuchMethod(
        Invocation.getter(#entitiesCount),
        returnValue: 0,
      ) as int);

  @override
  int get entitiesInGroup => (super.noSuchMethod(
        Invocation.getter(#entitiesInGroup),
        returnValue: 0,
      ) as int);

  @override
  _i8.KoGroupsCreatorRemainingEntitiesAction get remainingEntitiesAction =>
      (super.noSuchMethod(
        Invocation.getter(#remainingEntitiesAction),
        returnValue: _i8.KoGroupsCreatorRemainingEntitiesAction.placeRandomly,
      ) as _i8.KoGroupsCreatorRemainingEntitiesAction);

  @override
  _i2.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_0(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i2.EventSeries);

  @override
  _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>> get competition =>
      (super.noSuchMethod(
        Invocation.getter(#competition),
        returnValue: _FakeCompetition_1<T, _i3.Standings<dynamic, _i4.ScoreDetails>>(
          this,
          Invocation.getter(#competition),
        ),
      ) as _i5.Competition<T, _i3.Standings<dynamic, _i4.ScoreDetails>>);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i6.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_2(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i6.Hill);
}

/// A class which mocks [KoRoundNBestAdvancementDeterminingContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockKoRoundNBestAdvancementDeterminingContext<T,
        S extends _i3.Standings<dynamic, _i4.ScoreDetails>> extends _i1.Mock
    implements _i9.KoRoundNBestAdvancementDeterminingContext<T, S> {
  MockKoRoundNBestAdvancementDeterminingContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EventSeries get eventSeries => (super.noSuchMethod(
        Invocation.getter(#eventSeries),
        returnValue: _FakeEventSeries_0(
          this,
          Invocation.getter(#eventSeries),
        ),
      ) as _i2.EventSeries);

  @override
  _i5.Competition<T, S> get competition => (super.noSuchMethod(
        Invocation.getter(#competition),
        returnValue: _FakeCompetition_1<T, S>(
          this,
          Invocation.getter(#competition),
        ),
      ) as _i5.Competition<T, S>);

  @override
  S get koStandings => (super.noSuchMethod(
        Invocation.getter(#koStandings),
        returnValue: _i10.dummyValue<S>(
          this,
          Invocation.getter(#koStandings),
        ),
      ) as S);

  @override
  int get currentRound => (super.noSuchMethod(
        Invocation.getter(#currentRound),
        returnValue: 0,
      ) as int);

  @override
  _i6.Hill get hill => (super.noSuchMethod(
        Invocation.getter(#hill),
        returnValue: _FakeHill_2(
          this,
          Invocation.getter(#hill),
        ),
      ) as _i6.Hill);

  @override
  List<T> get entities => (super.noSuchMethod(
        Invocation.getter(#entities),
        returnValue: <T>[],
      ) as List<T>);
}
